package mygame;

import com.jme3.app.SimpleApplication;
import com.jme3.light.DirectionalLight; // lighting
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA; // color objects
import com.jme3.math.Vector3f; // adds vectors for placement
import com.jme3.renderer.RenderManager;
import com.jme3.scene.Geometry; // making shapes
import com.jme3.scene.Node;
import com.jme3.scene.shape.Box; // specific shape
import com.jme3.scene.shape.Sphere;
import com.jme3.scene.Spatial;
// for input
import com.jme3.input.KeyInput;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.AnalogListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.MouseButtonTrigger;
// bucket
import com.jme3.renderer.queue.RenderQueue.Bucket;
import com.jme3.material.RenderState.BlendMode;

/**
 * This is the Main Class of your Game. You should only do initialization here.
 * Move your Logic into AppStates or Controls (to the updates for loops or render)
 * @author normenhansen
 */
public class Main extends SimpleApplication 
{
    // static makes something like a global variable, it will need to be make as a public however
    public static int num, num2, num3;
    
    public static void main(String[] args) 
    {
        Main app = new Main();
        app.start();
    }
    
    // for controls
    protected Geometry player;
    protected Node pivotChar;
    Boolean isRunning=true;
    
    protected Geometry geom; // Protects or allows use in other functions
    // don't initialize later or it will not work
    protected Geometry geon;

    @Override
    public void simpleInitApp() 
    { // loaded at the start of app load and initializes the scene, once
        // Box
        Box d = new Box(1, 1, 1); // creates it with properties (width, height, thickness)
        geom = new Geometry("Box", d);
        geom.setLocalTranslation(new Vector3f(1,10,1)); // moves the box (x, y, z)
        Material mat_brick = new Material( 
            assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        mat_brick.setTexture("ColorMap", 
            assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.jpg"));
        geom.setMaterial(mat_brick); // sets texture to a brick wall
        geom.scale( .5f,  .5f, .5f); // halfs the cube's size
        
         /** Create a pivot node at (0,0,0) and attach it to the root node */
        Node pivot = new Node("pivot"); // protected at top
        rootNode.attachChild(pivot); // put this node in the scene
        pivot.attachChild(geom); // attaches goem to scene
        // pivot.rotate(.4f,.4f,0f); // rotates the objects attatched to pivot
        // use <shape>.rotate(rotations); for individual shapes
        
        // to detach use rootNode.detatchchild();
        
        // box used as player for controls
        Box b = new Box(1, 1, 1);
        player = new Geometry("Player", b);
        Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        mat.setColor("Color", ColorRGBA.Blue);
        player.setMaterial(mat);
        pivotChar = new Node("pivotChar");
        rootNode.attachChild(pivotChar);
        pivotChar.attachChild(player);
        pivotChar.setUserData( "player", 42); // stores data in pivot
         int health = pivotChar.getUserData( "player" ); // calls data stored in pivot
        
        /** A translucent/transparent texture, similar to a window frame. */
        Box cube2Mesh = new Box( 1f,1f,0.01f);
        Geometry cube2Geo = new Geometry("window frame", cube2Mesh);
        Material cube2Mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        cube2Mat.setTexture("ColorMap", assetManager.loadTexture("Textures/ColoredTex/Monkey.png"));
        cube2Mat.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);  // !
        cube2Geo.setQueueBucket(Bucket.Transparent);                        // !
        cube2Geo.setMaterial(cube2Mat);
        rootNode.attachChild(cube2Geo);

        
        // Sphere test
        // Shape variable = new Shape(zSamples, Points, size)
        Sphere c = new Sphere(10, 100, 5);
        geon = new Geometry("Sphere", c); // normally Geometry geon, but it is already created
        Material mak = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        mak.setColor("Color", ColorRGBA.Red); // color of matierial
        geon.setMaterial(mak);
        // rootNode.attachChild(geon);
        geon.setLocalTranslation( new Vector3f( 0.0f, 40.2f, -2.0f ) ); // moves sphere to a specific place
        geon.move( -4, -15, 0 ); // moves from current location
        rootNode.attachChild(geon);
        // pivot.rotate(.4f,.4f,0f);
        
        // tea pot
        Spatial teapot = assetManager.loadModel("Models/Teapot/Teapot.obj");
        Material mat_default = new Material( 
            assetManager, "Common/MatDefs/Misc/ShowNormals.j3md");
        teapot.setMaterial(mat_default);
        rootNode.attachChild(teapot);
        
        // Load a model from test_data (OgreXML + material + texture)
        Spatial ninja = assetManager.loadModel("Models/Ninja/Ninja.mesh.xml");
        ninja.scale(0.05f, 0.05f, 0.05f);
        ninja.rotate(0.0f, -3.0f, 0.0f);
        ninja.setLocalTranslation(0.0f, -5.0f, -2.0f);
        rootNode.attachChild(ninja);
        // You must add a light to make the model visible
        DirectionalLight sun = new DirectionalLight();
        sun.setDirection(new Vector3f(-0.1f, -0.7f, -1.0f));
        rootNode.addLight(sun);
        
        num = -1000;
        num2 = 0;
        num3 = 0;
        
        initKeys(); // load my custom keybinding
        // flyCam.setEnabled(false); // removes the spectate camera controls
    }
    
        
    @Override
    // use main event loop (thing below) for repeating changes
    public void simpleUpdate(float tpf) // Runs code after initialization, every frame
    {
        
        // makes box rotate, then appear to roll
        geom.rotate(0, 0, 2f * tpf); // tpf is time per frame
        geom.move(-5f * tpf, 0, 0);
        
        
        
        // makes the sphere shrink and grow
        /*
        if (num2 >= -500)
        {
            geon.scale( 1.001f,  1.001f, 1.001f);
        num2 = num2 - 1;
        } 
        else if (num2 < -500)
        {
           geon.scale( 0.999f, 0.999f, 0.999f); 
        num2 = num2 - 1;
        }
        
        if (num2 == (num + 1))
        {
            num2 = 0;
        }
        */
        
        /* moves sphere
        geon.move(0, -1 * tpf, 0); // moves sphere infinitely down
        if (num2 > num)
        {
            num2 = num2 - 1;
        }
        else
        {
            geon.move(0, 1 * tpf, 0); // moves the sphere up, countering earlier code
        }
        */
        
        
    }

    @Override
    // redraws the scene, but not until after the code above
    public void simpleRender(RenderManager rm) 
    {
        
        if (num3 == 0)
        {
            Material bork = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
            bork.setColor("Color", ColorRGBA.Red); // color of matierial
            geom.setMaterial(bork);
        }
        
        if (num3 == 250)
        {
            Material bork = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
            bork.setColor("Color", ColorRGBA.Blue); // color of matierial
            geom.setMaterial(bork);
        }
        
        if (num3 == 500)
        {
            Material bork = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
            bork.setColor("Color", ColorRGBA.Yellow); // color of matierial
            geom.setMaterial(bork);
        }
        
        if (num3 == 750)
        {
            Material bork = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
            bork.setColor("Color", ColorRGBA.Green); // color of matierial
            geom.setMaterial(bork);
        }
        
        if (num3 == 1000)
        {
            Material bork = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
            bork.setColor("Color", ColorRGBA.Orange); // color of matierial
            geom.setMaterial(bork);
        }
        num3 += 1;
        
        if (num3 > 1250)
            num3 = 0;
    }
    
    // where the code for keys is
    /** Custom Keybinding: Map named actions to inputs. */
  private void initKeys() 
  {
    // You can map one or several inputs to one named action
    inputManager.addMapping("Pause",  new KeyTrigger(KeyInput.KEY_P));
    inputManager.addMapping("Left",   new KeyTrigger(KeyInput.KEY_J));
    inputManager.addMapping("Down",  new KeyTrigger(KeyInput.KEY_LCONTROL));
    inputManager.addMapping("Right", new KeyTrigger(KeyInput.KEY_L));
    inputManager.addMapping("Forward", new KeyTrigger(KeyInput.KEY_I));
    inputManager.addMapping("Back", new KeyTrigger(KeyInput.KEY_K));
    inputManager.addMapping("Jump", new KeyTrigger(KeyInput.KEY_SPACE));
    inputManager.addMapping("Shoot", new MouseButtonTrigger(MouseInput.BUTTON_RIGHT));
    inputManager.addMapping("RotateL", new KeyTrigger(KeyInput.KEY_LEFT));
    inputManager.addMapping("RotateR", new KeyTrigger(KeyInput.KEY_RIGHT));
    // Add the names to the action listener.
    inputManager.addListener(actionListener,"Pause", "Shoot");
    inputManager.addListener(analogListener,"Left", "Right", "Down", "Forward", "Back", "Jump", "RotateL", "RotateR");

  }
  
  private ActionListener actionListener = new ActionListener() // pressing of a key
        {
           @Override
           public void onAction(String name, boolean keyPressed, float tpf) 
           {
               Vector3f v = player.getLocalTranslation();
               Vector3f c = pivotChar.getLocalTranslation();
               if (name.equals("Pause") && !keyPressed) 
               {
                 isRunning = !isRunning;
               }
               if (isRunning)
               {
                    if (name.equals("Shoot") && !keyPressed)
                    {
                        // moves the color cube to the player
                        geom.setLocalTranslation(v.x, v.y, v.z);
                    } 
               }
           }
        };  

  private AnalogListener analogListener = new AnalogListener() // repeated checks
  {
    @Override
    public void onAnalog(String name, float value, float tpf)
    {
        Vector3f v = player.getLocalTranslation();
        Vector3f c = pivotChar.getLocalTranslation();
      if (isRunning)
      {
        if (name.equals("Jump")) 
        {
            player.setLocalTranslation(v.x, v.y + value * speed, v.z);
            //pivotChar.setLocalTranslation(c.x, c.y + value * speed, c.z);
        }
        if (name.equals("Right")) 
        {
            player.setLocalTranslation(v.x, v.y, v.z + value*speed);
            //pivotChar.setLocalTranslation(c.x, c.y, c.z + value*speed);
        }
        if (name.equals("Left")) 
        {
            player.setLocalTranslation(v.x, v.y, v.z - value*speed); 
            //pivotChar.setLocalTranslation(c.x, c.y, c.z - value*speed);
        }
        if (name.equals("Down"))
        {
            player.setLocalTranslation(v.x, v.y - value * speed, v.z);
            //pivotChar.setLocalTranslation(c.x, c.y - value * speed, c.z);
        }
        if (name.equals("Forward"))
        {
            player.setLocalTranslation(v.x + value * speed, v.y, v.z);
            //pivotChar.setLocalTranslation(c.x + value * speed, c.y, c.z);
        }
        if (name.equals("Back"))
        {
            player.setLocalTranslation(v.x - value * speed, v.y, v.z);
            //pivotChar.setLocalTranslation(c.x - value * speed, c.y, c.z);
        }
        if (name.equals("RotateL"))
        {
            // gets the world location and translates to local location
            Vector3f f = player.getWorldTranslation();
            player.worldToLocal(f, v); // moves to center of map for some reason
            pivotChar.rotate(0, value*speed, 0);
            player.setLocalTranslation(v.x, v.y, v.z);
        }
        if (name.equals("RotateR"))
        {
            // gets the world location and translates to local location
            Vector3f f = player.getWorldTranslation();
            player.worldToLocal(f, v);
            pivotChar.rotate(0, value*(-speed), 0);
            player.setLocalTranslation(v.x, v.y, v.z);
        }
        
        /*
        // regets variables after changes and moves pivot to player
        v = player.getLocalTranslation();
        // c = pivotChar.getLocalTranslation();
        player.setLocalTranslation(new Vector3f (c.x, 0, c.z));
        pivotChar.setLocalTranslation(v.x, 0, v.z);
        */
        
      } 
      else 
      {
        System.out.println("Press P to unpause.");
      }
    }
  };  
}
