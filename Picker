package mygame; // for HelloPicker

import com.jme3.app.SimpleApplication;
import com.jme3.collision.CollisionResult;
import com.jme3.collision.CollisionResults;
import com.jme3.font.BitmapText;
import com.jme3.input.KeyInput;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.MouseButtonTrigger;
import com.jme3.light.DirectionalLight;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Ray;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.Node;
import com.jme3.scene.Spatial;
import com.jme3.scene.shape.Box;
import com.jme3.scene.shape.Sphere;

/** Sample 8 - how to let the user pick (select) objects in the scene
 * using the mouse or key presses. Can be used for shooting, opening doors, etc. */
public class Main extends SimpleApplication {

  public static void main(String[] args) {
    Main app = new Main();
    app.start();
  }
  
  private Node shootables;
  private Node inventory; // for pretend inventory
  private Geometry mark, g; // g is object hit
  private String hit = "Empty"; // hit is name of hit thing
  private CollisionResult closest; // for thing hit
  private Geometry[] inv = new Geometry[10]; // stores inventory
  private int slot = 0; // inventory slot

  @Override
  public void simpleInitApp() 
  {
    initCrossHairs(); // a "+" in the middle of the screen to help aiming
    initKeys();       // load custom key mappings
    initMark();       // a red sphere to mark the hit

    inventory = new Node("Inventory"); // for inventory
    initInventory(); // loads inventory ui
    
    /** create four colored boxes and a floor to shoot at: (loads methods for objects)*/
    shootables = new Node("Shootables"); // put shootable objects on a seperate node
    rootNode.attachChild(shootables);
    shootables.attachChild(makeCube("a Dragon", -2f, 0f, 1f));
    shootables.attachChild(makeCube("a tin can", 1f, -2f, 0f));
    shootables.attachChild(makeCube("the Sheriff", 0f, 1f, -2f));
    shootables.attachChild(makeCube("the Deputy", 1f, 0f, -4f));
    shootables.attachChild(makeFloor());
    shootables.attachChild(makeCharacter());
  }

  /** Declaring the "Shoot" action and mapping to its triggers. */
  private void initKeys() {
    inputManager.addMapping("Shoot",
      new KeyTrigger(KeyInput.KEY_SPACE), // trigger 1: spacebar
      new MouseButtonTrigger(MouseInput.BUTTON_LEFT)); // trigger 2: left-button click
    inputManager.addMapping("Place", new KeyTrigger(KeyInput.KEY_P));
    inputManager.addMapping("PickUp", new KeyTrigger(KeyInput.KEY_O));
    inputManager.addMapping("ColorChange", new KeyTrigger(KeyInput.KEY_C));
    inputManager.addListener(actionListener, "Shoot", "Place", "PickUp", "ColorChange");
  }
  /** Defining the "Shoot" action: Determine what was hit and how to respond. */
  private ActionListener actionListener = new ActionListener() {

    public void onAction(String name, boolean keyPressed, float tpf) 
    {
        
      if (name.equals("Shoot") && !keyPressed) 
      {
        /*
        CollisionResults results = new CollisionResults();
        Vector2f click2d = inputManager.getCursorPosition().clone();
        Vector3f click3d = cam.getWorldCoordinates(
            click2d, 0f).clone();
        Vector3f dir = cam.getWorldCoordinates(
            click2d, 1f).subtractLocal(click3d).normalizeLocal();
        Ray ray = new Ray(click3d, dir);
        shootables.collideWith(ray, results); // Replace 1 to 3 to get a cursor instead of crosshair
        inputManager.setCursorVisible(true)*/ // This is for making sure the cursor is visable
          
        // 1. Reset results list.
        CollisionResults results = new CollisionResults();
        // 2. Aim the ray from cam loc to cam direction.
        Ray ray = new Ray(cam.getLocation(), cam.getDirection());
        // 3. Collect intersections between Ray and Shootables in results list.
        // DO NOT check collision with the root node, or else ALL collisions will hit the skybox! Always make a separate node for objects you want to collide with.
        shootables.collideWith(ray, results);
        // 4. Print the results
        System.out.println("----- Collisions? " + results.size() + "-----");
        for (int i = 0; i < results.size(); i++) {
          // For each hit, we know distance, impact point, name of geometry.
          float dist = results.getCollision(i).getDistance();
          Vector3f pt = results.getCollision(i).getContactPoint();
          hit = results.getCollision(i).getGeometry().getName(); // privated to allow access outside of Shoot
          System.out.println("* Collision #" + i);
          System.out.println("  You shot " + hit + " at " + pt + ", " + dist + " wu away.");
        }
        // 5. Use the results (we mark the hit object)
        if (results.size() > 0) {
          // The closest collision point is what was truly hit:
          closest = results.getClosestCollision();
          // Color Change
          g = closest.getGeometry(); // sets g to closest geometry hit
          // Let's interact - we mark the hit with a red dot.
          mark.setLocalTranslation(closest.getContactPoint()); // mark is the sphere
          rootNode.attachChild(mark);
          
          
          
        } 
        else 
        {
          // No hits? Then remove the red mark.
          rootNode.detachChild(mark);
          hit = ("Empty"); // empties hand
        }
      }
      
      // picks up
        if (name.equals("PickUp") && !keyPressed) // not loading with if here
        {
            if (!(hit.equals("Empty")) && slot < 10) // only activate if not empty
              pickUp(g);
            System.out.println("Picked up " + hit);
        }
        // places back down
        else if (name.equals("Place") && !keyPressed)
        {
          placeDown(g); 
        }
        
        // color change
        if (name.equals("ColorChange") && !keyPressed)
        {
            changeColor(g); // calls method
        }
    }
  };
  
  private void pickUp(Geometry g) // places into inventory node
  {
    if (g.hasAncestor(shootables))
    {
        shootables.detachChild(g);
        inventory.attachChild(g);
        inv[slot] = g;
        placeOnUi(); // places it on ui
        slot++; // next slot
    }
  }
  
  private void placeDown(Geometry g) // places back into shootables
  {
      if (slot > 0) // activates only if something is stored
      {
        inventory.detachChild(inv[slot - 1]); // goes to last filled slot
        shootables.attachChild(inv[slot - 1]);
        removeFromUi(); // removes from ui
        slot--; // back a slot
        inv[slot].setLocalTranslation(closest.getContactPoint()); // places at marker
      }
  }
  
  private void changeColor(Geometry g)
  {
      // change color
        Material m = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md"); // new material
        m.setColor("Color", ColorRGBA.randomColor()); // random color
        g.setMaterial(m); // applies new color to geometry
  }
  
  private void placeOnUi() // places object on ui
  {
    Spatial guiPic = inv[slot];
    guiPic.scale(25f); // makes it bigger so it can be seen on ui
    guiPic.setLocalTranslation(100 * slot,settings.getHeight() - 25, 0); // places at top of screen that moves when new item is added
    // guiPic.setLocalTranslation(settings.getWidth(),settings.getHeight(), 0); // top right of screen
    // guiPic.setLocalTranslation(0f, 0f, 0); // bottom left corner of the screen
  }
  
  private void removeFromUi() // removes from ui
  {
    Spatial guiPic = inv[slot - 1];
    guiPic.scale(.04f); // makes it smaller (reverses growth for ui)
  }

  /** A cube object for target practice */
  protected Geometry makeCube(String name, float x, float y, float z) {
    Box box = new Box(1, 1, 1);
    Geometry cube = new Geometry(name, box);
    cube.setLocalTranslation(x, y, z);
    Material mat1 = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
    mat1.setColor("Color", ColorRGBA.randomColor());
    cube.setMaterial(mat1);
    return cube;
  }

  /** A floor to show that the "shot" can go through several objects. */
  protected Geometry makeFloor() {
    Box box = new Box(15, .2f, 15);
    Geometry floor = new Geometry("the Floor", box);
    floor.setLocalTranslation(0, -4, -5);
    Material mat1 = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
    mat1.setColor("Color", ColorRGBA.Gray);
    floor.setMaterial(mat1);
    return floor;
  }

  /** A red ball that marks the last spot that was "hit" by the "shot". */
  protected void initMark() {
    Sphere sphere = new Sphere(30, 30, 0.2f);
    mark = new Geometry("BOOM!", sphere);
    Material mark_mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
    mark_mat.setColor("Color", ColorRGBA.Red);
    mark.setMaterial(mark_mat);
  }

  /** A centred plus sign to help the player aim. */
  protected void initCrossHairs() {
    setDisplayStatView(false);
    guiFont = assetManager.loadFont("Interface/Fonts/Default.fnt");
    BitmapText ch = new BitmapText(guiFont, false);
    ch.setSize(guiFont.getCharSet().getRenderedSize() * 2);
    ch.setText("+"); // crosshairs
    ch.setLocalTranslation( // center
      settings.getWidth() / 2 - ch.getLineWidth()/2, settings.getHeight() / 2 + ch.getLineHeight()/2, 0);
    guiNode.attachChild(ch);
  }
  
  // generates inventory ui
  protected void initInventory()
  {
    guiNode.attachChild(inventory); // adds inventory to ui
    DirectionalLight pocketLight = new DirectionalLight(); // creates light
    pocketLight.setDirection(new Vector3f(0, 0, -1.0f)); // sets direction of light
    guiNode.addLight(pocketLight); // adds a light to the ui
  }

  protected Spatial makeCharacter() {
    // load a character from jme3test-test-data
    Spatial golem = assetManager.loadModel("Models/Oto/Oto.mesh.xml");
    golem.scale(0.5f);
    golem.setLocalTranslation(-1.0f, -1.5f, -0.6f);

    // We must add a light to make the model visible
    DirectionalLight sun = new DirectionalLight();
    sun.setDirection(new Vector3f(-0.1f, -0.7f, -1.0f));
    golem.addLight(sun);
    return golem;
  }
}
